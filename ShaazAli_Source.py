# -*- coding: utf-8 -*-
"""IshitaGaurSourceCode.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ibR6zG4VC-Gs-_CeKhOyE0NRh9w0hNfI
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# Read the Airbnb Data
df=pd.read_csv('/content/sample_data/AirbnbData.csv',low_memory=False)

df.head()

df.info()

df.duplicated().value_counts()

#Neighbourhood group was 'brookln' instead of 'Brooklyn'

df[df['neighbourhood group']=='brookln']

#clean data
df.drop_duplicates(inplace=True)

#drop house_rules and license columns with insufficient data
df.drop(['house_rules','license'],axis=1,inplace=True)

#Remove all dollar signs in the price and service fee columns
df['price']=df['price'].str.replace('$','',regex=False)
df['service fee']=df['service fee'].str.replace('$','',regex=False)
df.head()

#Remove all commas in the price and service fee columns
df['price']=df['price'].str.replace(',','',regex=False)
df['service fee']=df['service fee'].str.replace(',','',regex=False)
df.head()

#Remove the price and service fee columns to include a dollar sign
df.rename(columns={
    'price':'price$',
    'service fee':'service_fee_$'
},inplace=True)
df.head()

#Drop all records with missing values
df.dropna(inplace=True)

#Change all mismatched data types to the appropriate once.
df['price$']=df['price$'].astype(float)
df['service_fee_$']=df['service_fee_$'].astype(float)
df['id'] =df['id'].astype(str)
df['host id']=df['host id'].astype(str)
df['last review']=pd.to_datetime(df['last review'])
df['Construction year']=df['Construction year'].astype(int)
df.info()

#Correct the Spelling of 'brookln' to 'Brooklyn'
df.loc[df['neighbourhood group']=='brookln','neighbourhood group']='Brooklyn'

#Get rid of outliers in the 'availability 365' column data
df=df.drop(df[df['availability 365'] > 500].index)

df.duplicated().value_counts()

df.info()

df.describe()

#What are the different property types in the Dataset?
property_types=df['room type'].value_counts().to_frame()
property_types

#Room types count plotted on a barchart
room_type_bar=plt.bar(property_types.index,property_types.loc[:,"count"]);
plt.bar_label(room_type_bar,labels=property_types.loc[:,"count"],padding=4);
plt.ylim([0,50000])
plt.xlabel('Room Type');
plt.ylabel('Room Type Count ');
plt.title('Property Types and their count in the Dataset');
plt.show();

hood_group=df['neighbourhood group'].value_counts().to_frame()
hood_group

#Which neightbourhood has the highest number of listinngs?
hood_group_bar=plt.bar(hood_group.index,hood_group.loc[:,"count"]);
plt.bar_label(hood_group_bar,labels=hood_group.loc[:,"count"],padding=4);
plt.ylim([0,40000])
plt.xlabel('Neighbourhood Group');
plt.ylabel('Number of Listings ');
plt.xticks(rotation=45);
plt.title('Which Neighborhood Group has the highest number of Listings');
plt.show();

#Which neighbourhood group have the highest average prices for Airbnb listings?
avg_price =df.groupby('neighbourhood group')['price$'].mean().sort_values(ascending=False).to_frame()
avg_price_bar=plt.bar(avg_price.index,avg_price.loc[:,"price$"]);
plt.bar_label(avg_price_bar,labels=round(avg_price.loc[:,"price$"],2),label_type="edge",padding=4);
plt.ylim([0,700]);
plt.xlabel('Neighbourhood Group');
plt.ylabel('Average Price per Listings ($)');
plt.xticks(rotation=45);
plt.title('Average Price per Listings ($) in each Neighborhood Group');
plt.show();

#Is there a relationship between the construction year of property and price
df.groupby(df['Construction year'])['price$'].mean().to_frame().plot();
plt.xlabel('Construction Year');
plt.ylabel('Average Price  ($)');
plt.title('Average Price ($) for Properties in each Construction Year');
plt.show();

#Who are the top 10 hosts by calculated host listing count?
host =df.groupby('host name')['calculated host listings count'].sum().sort_values(ascending=False).nlargest(10).to_frame()
host_bar=plt.bar(host.index,host.loc[:,"calculated host listings count"]);
plt.bar_label(host_bar,labels=host.loc[:,"calculated host listings count"],label_type='edge',padding=4);
plt.xlabel('Host Name');
plt.ylabel('Calculated Host Listings Count');
plt.xticks(rotation=45);
plt.ylim([0,120000]);
plt.title('Top 10 Hosts by Calculated Host Listing Count');
plt.show();

#Are host with verified identied identities more likely to receive positive reviews?
review =df.groupby('host_identity_verified')['review rate number'].mean().sort_values(ascending=False).to_frame()
review

review_bar=plt.bar(review.index,review.loc[:,"review rate number"]);
plt.bar_label(review_bar,labels= round(review.loc[:,"review rate number"],2),label_type='edge',padding=4);
plt.ylim([0,4]);
plt.xlabel("Host Verification  Status");
plt.ylabel("Average Review Rate Number");
plt.title("Average Review Rate for each  Verification Statistics.");
plt.show();

base_color=sns.color_palette()[0]
sns.boxplot(data=df,x="host_identity_verified",y="review rate number",color=base_color);
plt.xlabel("Host Verification status");
plt.ylabel("Review Rate Number");
plt.title("Average Review Rate for each Verification Status");
plt.show()

#Is there a correlation between the price of a listing and its service fee?
df['price$'].corr(df['service_fee_$'])

sns.regplot(data=df,x="price$",y="service_fee_$");
plt.xlabel("Price ($)");
plt.ylabel("Service Fee ($)");
plt.title("A Regression Plot showing the Correlation of the  Price of a Listing and its Service Fee");
plt.show()

#What is the average review rate number(e.g.,stars ) for listings,drop it vary based on the neighbourhood group and room typ?
ARRN = df.groupby(['neighbourhood group','room type'])['review rate number'].mean().to_frame()
ARRN

plt.figure(figsize=[12,10]);
sns.barplot(data=df,x="neighbourhood group",y="review rate number",hue="room type");
plt.xlabel("Neighbourhood Group");
plt.ylabel("Average Review Rate Number");
plt.title("Average Review Rate Number for each Room/Property Type in each  Neighbourhood Group")
plt.show();

#Are Hosts with a higher calculated host listings count more likely to maintain higher availability throughout the year?
sns.regplot(data=df,x="calculated host listings count",y="availability 365");
plt.xlabel("calculated host listings ");
plt.ylabel("availability 365");
plt.title("A Regression Plot of the Relationship between Calculated Host Listings Count and Availability 365");
plt.show();

df['calculated host listings count'].corr(df['availability 365'])